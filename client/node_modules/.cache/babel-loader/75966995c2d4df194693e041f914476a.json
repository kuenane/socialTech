{"ast":null,"code":"var lib = require('./lib');\n\nvar error = require('./constants').error;\n/**\n * Validates that a number is a valid length (positive number)\n *\n * @private\n * @param {number} num - Number to validate\n */\n\n\nfunction _validateLength(num) {\n  if (!num || typeof num !== 'number' || num < 0) {\n    throw new Error(error.length);\n  }\n}\n/**\n * Tests a validation and return the result\n *\n * @private\n * @param {string} property - Property to validate\n * @return {boolean} Boolean value indicting the validity\n *           of the password against the property\n */\n\n\nfunction _isPasswordValidFor(property) {\n  return lib[property.method].apply(this, property.arguments);\n}\n/**\n * Registers the properties of a password-validation schema object\n *\n * @private\n * @param {string} func - Property name\n * @param {array} args - arguments for the func property\n */\n\n\nfunction _register(func, args) {\n  // Add property to the schema\n  this.properties.push({\n    method: func,\n    arguments: args\n  });\n  return this;\n}\n/**\n * Creates a password-validator schema\n *\n * @constructor\n */\n\n\nfunction PasswordValidator() {\n  // Initialize a schema with no properties defined\n  this.properties = [];\n}\n/**\n * Method to validate the password against schema\n *\n * @param {string} pwd - password to valdiate\n * @param {object} options - optional options to configure validation\n * @param {boolean} [options.list] - asks for a list of validation\n *           failures instead of just true/false\n * @return {boolean|array} Boolean value indicting the validity\n *           of the password as per schema, if 'options.list'\n *           is not set. Otherwise, it returns an array of\n *           property names which failed validations\n */\n\n\nPasswordValidator.prototype.validate = function (pwd, options) {\n  // Checks if pwd is invalid\n  if (typeof pwd !== 'string') {\n    throw new Error(error.password);\n  } // Sets password string\n\n\n  this.password = pwd; // Sets that no inversion takes place by default\n\n  this.positive = true;\n\n  var _this = this;\n\n  if (options && options.list === true) {\n    return this.properties.reduce(function (errorList, property) {\n      // Applies all validations defined in lib one by one\n      if (!_isPasswordValidFor.call(_this, property)) {\n        // If the validation for a property fails,\n        // add it to the error list\n        return errorList.concat(property.method);\n      }\n\n      return errorList;\n    }, []);\n  } // Returns the result of the validations\n\n\n  return this.properties.every(function (property) {\n    // Applies all validations defined in lib one by one\n    return _isPasswordValidFor.call(_this, property);\n  });\n};\n/**\n * Rule to invert the next applied rules.\n * All the rules applied after 'not' will have opposite effect,\n * until 'has' rule is applied\n */\n\n\nPasswordValidator.prototype.not = function not() {\n  return _register.call(this, 'not', arguments);\n};\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'has' is also used\n * to make the api readable and chainable\n */\n\n\nPasswordValidator.prototype.has = function has() {\n  return _register.call(this, 'has', arguments);\n};\n/**\n * Rule to invert the effects of 'not'\n * Apart from that, 'is' is also used\n * to make the api readable and chainable\n */\n\n\nPasswordValidator.prototype.is = function is() {\n  return _register.call(this, 'is', arguments);\n};\n/**\n * Rule to specify a minimum length of the password\n *\n * @param {number} num - minimum length\n */\n\n\nPasswordValidator.prototype.min = function min(num) {\n  _validateLength(num);\n\n  return _register.call(this, 'min', arguments);\n};\n/**\n * Rule to specify a maximum length of the password\n *\n * @param {number} num - maximum length\n */\n\n\nPasswordValidator.prototype.max = function max(num) {\n  _validateLength(num);\n\n  return _register.call(this, 'max', arguments);\n};\n/**\n * Rule to mendate the presense of digits in the password\n */\n\n\nPasswordValidator.prototype.digits = function digits() {\n  return _register.call(this, 'digits', arguments);\n};\n/**\n * Rule to mendate the presense of letters in the password\n */\n\n\nPasswordValidator.prototype.letters = function letters() {\n  return _register.call(this, 'letters', arguments);\n};\n/**\n * Rule to mendate the presense of uppercase letters in the password\n */\n\n\nPasswordValidator.prototype.uppercase = function uppercase() {\n  return _register.call(this, 'uppercase', arguments);\n};\n/**\n * Rule to mendate the presense of lowercase letters in the password\n */\n\n\nPasswordValidator.prototype.lowercase = function lowercase() {\n  return _register.call(this, 'lowercase', arguments);\n};\n/**\n * Rule to mendate the presense of symbols in the password\n */\n\n\nPasswordValidator.prototype.symbols = function symbols() {\n  return _register.call(this, 'symbols', arguments);\n};\n/**\n * Rule to mendate the presense of space in the password\n * It can be used along with 'not' to not allow spaces\n * in the password\n */\n\n\nPasswordValidator.prototype.spaces = function spaces() {\n  return _register.call(this, 'spaces', arguments);\n};\n/**\n * Rule to whitelist words to be used as password\n *\n * @param {array} list - list of values allowed\n */\n\n\nPasswordValidator.prototype.oneOf = function oneOf() {\n  return _register.call(this, 'oneOf', arguments);\n};\n\nmodule.exports = PasswordValidator;","map":null,"metadata":{},"sourceType":"script"}