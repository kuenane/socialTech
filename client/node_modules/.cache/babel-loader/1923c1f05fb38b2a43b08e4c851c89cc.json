{"ast":null,"code":"import _classCallCheck from \"/home/omeyer/Desktop/socialTech/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/omeyer/Desktop/socialTech/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/omeyer/Desktop/socialTech/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/omeyer/Desktop/socialTech/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/omeyer/Desktop/socialTech/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/omeyer/Desktop/socialTech/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/omeyer/Desktop/socialTech/client/src/components/content/dialogs/NewUser.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from \"@material-ui/core\";\nimport validator from \"validator\";\n\nvar NewUser =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewUser, _Component);\n\n  function NewUser(props) {\n    var _this;\n\n    _classCallCheck(this, NewUser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewUser).call(this, props));\n\n    _this.handleClickOpen = function () {\n      if (_this.validateUser() === true) {\n        _this.setState({\n          openDialog: true\n        });\n      }\n    };\n\n    _this.handleClose = function () {\n      _this.setState({\n        openDialog: false\n      });\n    };\n\n    _this.state = {\n      openDialog: false\n    };\n\n    var passwordValidator = require(\"password-validator\");\n\n    _this.passwordValidator = new passwordValidator();\n\n    _this.passwordValidator.is().min(8).is().max(100).has().uppercase().has().lowercase().has().digits().has().not().spaces().is().not().oneOf([\"Passw0rd\", \"Password123\"]);\n\n    _this.validateUser = _this.validateUser.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.clearValidationErrors = _this.clearValidationErrors.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.validateUser = _this.validateUser.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(NewUser, [{\n    key: \"clearValidationErrors\",\n    value: function clearValidationErrors(element) {\n      var newArr = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.props.prevState.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var error = _step.value;\n\n          if (element !== error.element) {\n            newArr.push(error);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return {\n        errors: newArr\n      };\n    }\n  }, {\n    key: \"validateUser\",\n    value: function validateUser() {\n      var username = this.props.parentState.username;\n      var email = this.props.parentState.email;\n      var password = this.props.parentState.password;\n      var confirmPassword = this.props.parentState.confirmPassword;\n      var firstname = this.props.parentState.firstname;\n      var lastname = this.props.parentState.lastname;\n      var companyName = this.props.parentState.companyName;\n      var registrationValid = true;\n\n      if (username === \"\") {\n        this.props.onSubmit(\"username\", \"Username cannot be empty!\");\n        registrationValid = false;\n      }\n\n      if (email === \"\") {\n        this.props.onSubmit(\"email\", \"Email cannot be empty!\");\n        registrationValid = false;\n      } else if (validator.isEmail(email) === false) {\n        this.props.onSubmit(\"email\", \"Invalid email format!\");\n        registrationValid = false;\n      }\n\n      if (password === \"\") {\n        this.props.onSubmit(\"password\", \"Password cannot be empty!\");\n        registrationValid = false;\n      }\n\n      if (confirmPassword === \"\") {\n        this.props.onSubmit(\"confirmPassword\", \"Confirm Password cannot be empty!\");\n        registrationValid = false;\n      } else if (confirmPassword !== password) {\n        this.props.onSubmit(\"confirmPassword\", \"Passwords do not match\");\n        this.props.onSubmit(\"password\", \"Passwords do not match\");\n        registrationValid = false;\n      }\n\n      if (this.passwordValidator.validate(password) === false) {\n        this.props.onSubmit(\"password\", \"Invalid password! \\nPassword must be longer than 8 characters. \\nContain 1 Uppercase,1 Lowercase, 1 Digit and 1 Special Character \");\n        registrationValid = false;\n      }\n\n      if (firstname === \"\") {\n        this.props.onSubmit(\"firstname\", \"Firstname cannot be empty!\");\n        registrationValid = false;\n      }\n\n      if (lastname === \"\") {\n        this.props.onSubmit(\"lastname\", \"Lastname cannot be empty!\");\n        registrationValid = false;\n      }\n\n      if (companyName === \"\") {\n        this.props.onSubmit(\"companyName\", \"CompanyName cannot be empty!\");\n        registrationValid = false;\n      }\n\n      return registrationValid;\n    }\n    /* dependant on Api branch\n    sendPostRequet() {\n      var http = require(\"http\");\n       var options = {\n        //this host will change when we deploy\n        host: \"localhost\",\n        port: \"3000\",\n        path: \"/signup\",\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n          //\"Authorization\": \"Bearer token\"\n        }\n      };\n       var req = http.request(options, function(res) {\n        var responseString = \"\";\n         res.on(\"data\", function(data) {\n          responseString += data;\n          // save all the data from response\n        });\n        res.on(\"end\", function() {\n          console.log(responseString);\n          // print to console when response ends\n        });\n      });\n      var reqBody = \"sometext\";\n      req.write(reqBody);\n      req.end();\n    }\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        onClick: this.handleClickOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Register\"), React.createElement(Dialog, {\n        open: this.state.openDialog,\n        onClose: this.handleClose,\n        \"aria-labelledby\": \"alert-dialog-title\",\n        \"aria-describedby\": \"alert-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"alert-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"Registration Succesfull\"), React.createElement(DialogContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        id: \"alert-dialog-description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, \"Thank you for joining us at S4A. Providing the tools you need to succeed.\")), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Continue\"))));\n    }\n  }]);\n\n  return NewUser;\n}(Component);\n\nexport default NewUser;","map":{"version":3,"sources":["/home/omeyer/Desktop/socialTech/client/src/components/content/dialogs/NewUser.js"],"names":["React","Component","Fragment","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","validator","NewUser","props","handleClickOpen","validateUser","setState","openDialog","handleClose","state","passwordValidator","require","is","min","max","has","uppercase","lowercase","digits","not","spaces","oneOf","bind","clearValidationErrors","element","newArr","prevState","errors","error","push","username","parentState","email","password","confirmPassword","firstname","lastname","companyName","registrationValid","onSubmit","isEmail","validate"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from \"@material-ui/core\";\nimport validator from \"validator\";\n\nclass NewUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      openDialog: false\n    };\n    var passwordValidator = require(\"password-validator\");\n    this.passwordValidator = new passwordValidator();\n    this.passwordValidator\n      .is()\n      .min(8)\n      .is()\n      .max(100)\n      .has()\n      .uppercase()\n      .has()\n      .lowercase()\n      .has()\n      .digits()\n      .has()\n      .not()\n      .spaces()\n      .is()\n      .not()\n      .oneOf([\"Passw0rd\", \"Password123\"]);\n\n    this.validateUser = this.validateUser.bind(this);\n    this.clearValidationErrors = this.clearValidationErrors.bind(this);\n    this.validateUser = this.validateUser.bind(this);\n  }\n\n  handleClickOpen = () => {\n    if (this.validateUser() === true) {\n      this.setState({ openDialog: true });\n    }\n  };\n\n  handleClose = () => {\n    this.setState({ openDialog: false });\n  };\n\n  clearValidationErrors(element) {\n    let newArr = [];\n    for (let error of this.props.prevState.errors) {\n      if (element !== error.element) {\n        newArr.push(error);\n      }\n    }\n    return { errors: newArr };\n  }\n\n  validateUser() {\n    const username = this.props.parentState.username;\n    const email = this.props.parentState.email;\n    const password = this.props.parentState.password;\n    const confirmPassword = this.props.parentState.confirmPassword;\n    const firstname = this.props.parentState.firstname;\n    const lastname = this.props.parentState.lastname;\n    const companyName = this.props.parentState.companyName;\n\n    let registrationValid = true;\n    if (username === \"\") {\n      this.props.onSubmit(\"username\", \"Username cannot be empty!\");\n      registrationValid = false;\n    }\n    if (email === \"\") {\n      this.props.onSubmit(\"email\", \"Email cannot be empty!\");\n      registrationValid = false;\n    } else if (validator.isEmail(email) === false) {\n      this.props.onSubmit(\"email\", \"Invalid email format!\");\n      registrationValid = false;\n    }\n\n    if (password === \"\") {\n      this.props.onSubmit(\"password\", \"Password cannot be empty!\");\n      registrationValid = false;\n    }\n\n    if (confirmPassword === \"\") {\n      this.props.onSubmit(\n        \"confirmPassword\",\n        \"Confirm Password cannot be empty!\"\n      );\n      registrationValid = false;\n    } else if (confirmPassword !== password) {\n      this.props.onSubmit(\"confirmPassword\", \"Passwords do not match\");\n      this.props.onSubmit(\"password\", \"Passwords do not match\");\n      registrationValid = false;\n    }\n    if (this.passwordValidator.validate(password) === false) {\n      this.props.onSubmit(\n        \"password\",\n        \"Invalid password! \\nPassword must be longer than 8 characters. \\nContain 1 Uppercase,1 Lowercase, 1 Digit and 1 Special Character \"\n      );\n      registrationValid = false;\n    }\n\n    if (firstname === \"\") {\n      this.props.onSubmit(\"firstname\", \"Firstname cannot be empty!\");\n      registrationValid = false;\n    }\n    if (lastname === \"\") {\n      this.props.onSubmit(\"lastname\", \"Lastname cannot be empty!\");\n      registrationValid = false;\n    }\n    if (companyName === \"\") {\n      this.props.onSubmit(\"companyName\", \"CompanyName cannot be empty!\");\n      registrationValid = false;\n    }\n    return registrationValid;\n  }\n  /* dependant on Api branch\n  sendPostRequet() {\n    var http = require(\"http\");\n\n    var options = {\n      //this host will change when we deploy\n      host: \"localhost\",\n      port: \"3000\",\n      path: \"/signup\",\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n        //\"Authorization\": \"Bearer token\"\n      }\n    };\n\n    var req = http.request(options, function(res) {\n      var responseString = \"\";\n\n      res.on(\"data\", function(data) {\n        responseString += data;\n        // save all the data from response\n      });\n      res.on(\"end\", function() {\n        console.log(responseString);\n        // print to console when response ends\n      });\n    });\n    var reqBody = \"sometext\";\n    req.write(reqBody);\n    req.end();\n  }\n*/\n  render() {\n    return (\n      <Fragment>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={this.handleClickOpen}\n        >\n          Register\n        </Button>\n        <Dialog\n          open={this.state.openDialog}\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            {\"Registration Succesfull\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Thank you for joining us at S4A. Providing the tools you need to\n              succeed.\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color=\"primary\">\n              Continue\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Fragment>\n    );\n  }\n}\n\nexport default NewUser;\n"]},"metadata":{},"sourceType":"module"}